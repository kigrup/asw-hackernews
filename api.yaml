openapi: 3.0.1
info:
  version: 1.0.0
  title: HackerNews
  description: "This is the Open API documentation for the REST API of our beloved application **HackerNews** deployed at <https://asw.raulplesa.online/>."
servers:
  - url: 'https://asw.raulplesa.online/api'
paths:
  /index:
    get:
      tags:
      - Posts
      summary: Retrieves all the URL Posts, in descending order by number of upvotes
      operationId: index
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Posts'
  /newest:
    get:
      tags:
      - Posts
      summary: Retrieves all the URL and text Posts, most recent first
      operationId: newest
      parameters:
      - name: by
        in: query
        description: Optional filter by ID of the user whose posts you want to see
        schema:
          type: string
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Posts'
  /ask:
    get:
      tags:
      - Posts
      summary: Retrieves all the text Posts, most recent first 
      operationId: ask
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Posts'
  /item:
    post:
      security:
        - ApiKeyAuth: []
      tags:
      - Posts
      summary: Adds a new post to the site
      operationId: submitPost
      requestBody:
        description: Field **title** is **REQUIRED**
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  minLength: 4
                  example: 'My Post title'
                text:
                  type: string
                  minLength: 4
                  maxLength: 280
                  example: 'My post content'
                url:
                  type: string
                  minLength: 4
                  maxLength: 280
                  example: 'https://www.google.com'
              required:
                - title
        required: true
      responses:
        201:
          description: Post created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReducedPost'
        400:
          description: 'Error: Bad Request'

        401:
          description: 'Error: Unauthorized'
  /item/{itemId}:
    get:
      tags:
      - Posts
      summary: Finds a Post by its ID
      description: Returns a single Post
      operationId: getPostById
      parameters:
      - name: itemId
        in: path
        description: ID of Post to return
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
        404:
          description: 'Error: Item Not Found'
    post:
      tags:
      - Posts
      security:
        - ApiKeyAuth: []
      summary: Posts a comment on the Post identified by the ID
      operationId: itemComment
      requestBody:
        description: Field **title** is **REQUIRED**
        content:
          application/json:
            schema:
              type: object
              properties:
                content:
                  type: string
                  example: 'My Post title'
              required:
                - content
        required: true
      parameters:
      - name: itemId
        in: path
        description: ID of the contribution
        required: true
        schema:
          type: integer
      responses:
        201:
          description: Comment Posted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentReduced'
        401:
          description: 'Error: Unathorized'
        404:
          description: 'Error: Post Not Found'
  /item/{itemId}/vote:
    put:
      security:
        - ApiKeyAuth: []
      tags:
      - Posts
      summary: Upvote or unvote a Post
      description: Returns the voted Post
      operationId: vote
      parameters:
      - name: itemId
        in: path
        description: ID of Post to vote
        required: true
        schema:
          type: integer
          format: int64
      - name: how
        in: query
        description: type of vote, "up" for upvote, "un" for unvote
        required: true
        schema:
          type: string          
      responses:
        200:
          description: successful operation or item already voted/unvoted
        400:
          description: 'Error: Bad Request'
        404:
          description: 'Error: Not Found'
  /user/{userId}:
    get:
      tags:
      - Users
      summary: Returns the user identified by userId
      description: Returns a single Post
      operationId: getUser
      parameters:
      - name: userId
        in: path
        description: id of the user to retrieve
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        401:
          description: 'Error: no API key'
        403:
          description: 'Error: API key not valid'
        404:
          description: 'Error: user with userId as ID not found'
    put:
      tags:
      - Users
      security:
        - ApiKeyAuth: []
      summary: modifies the about field of a user
      operationId: userEdit
      parameters:
      - name: userId
        in: path
        description: Id of the user to modify
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        description: Field **about** is **REQUIRED**
        content:
          application/json:
            schema:
              type: object
              properties:
                about:
                  type: string
                  minLength: 4
                  maxLength: 280
                  example: 'description about me'
        required: true
      responses:
        200:
          description: Modified User
        400:
          description: 'Error: Bad Request'
        404:
          description: 'Error: User Not Found'
  /user/{userId}/threads:
    get:
      tags:
      - Users
      summary: Returns the comment threads where the user identified by userId participates
      description: Returns an Array of comments and their respective children
      operationId: threads
      parameters:
      - name: userId
        in: path
        description: id of the user to retrieve its comment threads
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items: 
                  $ref: '#/components/schemas/Comments'
        404:
          description: 'Error: user with userId as ID not found'
  /user/{userId}/likedposts:
    get:
      tags:
      - Users
      security:
        - ApiKeyAuth: []
      summary: Returns the users' liked posts
      description: Returns an Array of posts liked by the user
      operationId: likedPosts
      parameters:
      - name: userId
        in: path
        description: id of the user to retrieve its liked posts
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items: 
                  $ref: '#/components/schemas/Posts'
        401:
          description: 'Error: no API key'
        403:
          description: 'Error: API key not valid'
        404:
          description: 'Error: user with userId as ID not found'
  /user/{userId}/likedcomments:
    get:
      tags:
      - Users
      security:
        - ApiKeyAuth: []
      summary: Returns the users' liked comments
      description: Returns an Array of comments liked by the user
      operationId: likedComments
      parameters:
      - name: userId
        in: path
        description: id of the user to retrieve its liked comments
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items: 
                  $ref: '#/components/schemas/Comments'
        401:
          description: 'Error: no API key'
        403:
          description: 'Error: API key not valid'
        404:
          description: 'Error: user with userId as ID not found'
components:
  schemas:
    Item:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        title:
          type: string
          example: 'Check out this incredible video!'
        type:
          type: string
          minLength: 4
          example: 'post/url'
        content:
          type: string
          minLength: 4
          maxLength: 280
          example: 'https://www.youtube.com/watch?v=dQw4w9WgXcQ'
        upvotes:
          type: integer
          format: int32
          example: 315
        comments:
          type: integer
          format: int32
          example: 72
        authorId:
          type: string
          format: int64
          example: "101908718141570741187"
        authorName:
          type: string
          example: "raul.plesa"
        createdAt:
          type: string
          example: '2021-11-14T20:11:58.057Z'
        replies:
          type: array
          items:
            $ref: '#/components/schemas/Comment'
    Post:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        title:
          type: string
          example: 'Check out this incredible video!'
        type:
          type: string
          minLength: 4
          example: 'post/url'
        content:
          type: string
          minLength: 4
          maxLength: 280
          example: 'https://www.youtube.com/watch?v=dQw4w9WgXcQ'
        upvotes:
          type: integer
          format: int32
          example: 315
        comments:
          type: integer
          format: int32
          example: 72
        authorId:
          type: string
          format: int64
          example: "101908718141570741187"
        authorName:
          type: string
          example: "raul.plesa"
        createdAt:
          type: string
          example: '2021-11-14T20:11:58.057Z'
    ReducedPost:
      type: object
      properties:
        id:
          type: integer
          example: 23
        title:
          type: string
          example: 'My title!'
        content:
          type: string
          example: 'This is the post content...'
        author:
          type: string
          example: '101908718141570741187'
    Posts:
      type: object
      properties:
        posts:
          type: array
          items:
            $ref: '#/components/schemas/Post'
    Comment:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        content:
          type: string
          example: 'This is a comment!'
        upvotes:
          type: integer
          example: 381
        authorId:
          type: string
          example: "101908718141570741187"
        authorName:
          type: string
          example: "raul.plesa"
        createdAt:
          type: string
          example: '2021-11-14T20:11:58.057Z'
        replies:
          type: array
          items:
            $ref: '#/components/schemas/Comment'
    CommentReduced:
      type: object
      properties:
        comment:
          type: object
          properties:
            id:
              type: integer
              format: int64
              example: 1
            type:
              type: string
              example: 'comment' 
            content:
              type: string
              example: 'This is a comment!'                      
            author:
              type: string
              example: "raul.plesa"
            upvotes:
              type: integer
              example: 381
            createdAt:
              type: string
              example: '2021-11-14T20:11:58.057Z'
    Comments:
      type: object
      properties:
        comments:
          type: array
          items:
            $ref: '#/components/schemas/Comment'
    User:
      type: object
      properties:
        user:
          type: object
          properties:
            username:
              type: string
              example: 'raul.plesa'
            id:
              type: string
              example: "101908718141570741187"
            email:
              type: string
              example: "raul.plesa@gmail.com"
            about:
              type: string
              example: 'This is my description!'
            karma:
              type: integer
              example: 250
            createdAt:
              type: string
              example: "2021-11-14T20:11:52.106Z"
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-KEY
 