openapi: 3.0.1
info:
  version: 1.0.0
  title: HackerNews
  description: "This is the Open API documentation for the REST API of our beloved application **HackerNews** deployed at <https://asw.raulplesa.online/>."
servers:
  - url: 'https://asw.raulplesa.online/api'
paths:
  /index:
    get:
      tags:
      - Posts
      summary: Retrieves all the Posts, sorted by number of upvotes
      operationId: index
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Post'
  /newest:
    get:
      tags:
      - Posts
      summary: Retrieves all the Posts, sorted by date of creation
      operationId: newest
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Post'
  /ask:
    get:
      tags:
      - Posts
      summary: Retrieves all the Posts that are of the type text, sorted by date of creation 
      operationId: ask
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Post'
  /item/{itemId}:
    get:
      tags:
      - Posts
      summary: Finds a Post by its ID
      description: Returns a single Post
      operationId: getPostById
      parameters:
      - name: itemId
        in: path
        description: ID of Post to return
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        404:
          description: 'Error: Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error404'
    post:
      tags:
      - Comments
      summary: Posts a comment for the Post identified by the ID
      operationId: itemComment
      parameters:
      - name: itemId
        in: path
        description: Post id to comment on
        content:
          application/json:
            schema:
              required:
              - Comment
              type: object
              properties:
                text:
                  type: string
                  minLength: 4
                  maxLength: 280
                  example: 'My comment text'
        required: true
      responses:
        200:
          description: Comment Posted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddCommentResult'
        404:
          description: 'Error: Post Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error404'
  /item/{itemId}/vote/{how}:
    get:
      tags:
      - Posts
      summary: Upvote or unvote a Post
      description: Returns the voted Post
      operationId: vote
      parameters:
      - name: itemId
        in: path
        description: ID of Post to vote
        required: true
        schema:
          type: integer
          format: int64
      - name: how
        in: path
        description: type of vote, "up" for upvote, "un" for unvote
        required: true
        schema:
          type: string          
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        404:
          description: 'Error: Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error404'
        400:
          description: 'Error: Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error400_vote'
  /item:
    post:
      tags:
      - Posts
      summary: Adds a new post to the site
      operationId: submitPost
      requestBody:
        description: Field **title** is **REQUIRED**
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  minLength: 4
                  example: 'My Post title'
                text:
                  type: string
                  minLength: 4
                  maxLength: 280
                  example: 'My post content'
                url:
                  type: string
                  minLength: 4
                  maxLength: 280
                  example: 'https://www.google.com'
              required:
                - title
        required: true
      responses:
        201:
          description: Post created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddPostResult'
        400:
          description: 'Error: Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error400'
  /item/{itemId}/likes:
    post:
      tags:
      - Posts
      summary: Likes a Post
      operationId: likePost
      parameters:
      - name: itemId
        in: path
        description: Post id to like
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: Liked Post
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        404:
          description: 'Error: Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error404'
  /user/{userId}:
    get:
      tags:
      - Users
      summary: Returns the user identified by userId
      description: Returns a single Post
      operationId: getUser
      parameters:
      - name: userId
        in: path
        description: id of the user to retrieve
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        401:
          description: 'Error: no API key'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error401'
        403:
          description: 'Error: API key not valid'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error403'
                  
        404:
          description: 'Error: userId not valid'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error404'
    put:
      tags:
      - Users
      summary: modifies the about field of a user
      operationId: userEdit
      parameters:
      - name: userId
        in: path
        description: Id of the user to modify
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        description: Field **about** is **REQUIRED**
        content:
          application/json:
            schema:
              type: object
              properties:
                about:
                  type: string
                  minLength: 4
                  maxLength: 280
                  example: 'description about me'
        required: true
      responses:
        200:
          description: Modified User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModifiedUserResult'
        400:
          description: 'Error: Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error400'
        404:
          description: 'Error: User Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error404'
  /user/{userId}/threads:
    get:
      tags:
      - Users
      summary: Returns the comment threads where the user identified by userId participates
      description: Returns an Array of comments and their respective children
      operationId: threads
      parameters:
      - name: userId
        in: path
        description: id of the user to retrieve its comment threads
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items: 
                  $ref: '#/components/schemas/Comment'
        404:
          description: 'Error: userId not valid'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error404'
  /user/{userId}/likedposts:
    get:
      tags:
      - Users
      summary: Returns the users' liked posts
      description: Returns an Array of posts liked by the user
      operationId: likedPosts
      parameters:
      - name: userId
        in: path
        description: id of the user to retrieve its liked posts
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items: 
                  $ref: '#/components/schemas/Post'
        401:
          description: 'Error: no API key'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error401'
        403:
          description: 'Error: API key not valid'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error403'
        404:
          description: 'Error: userId not valid'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error404'
  /user/{userId}/likedcomments:
    get:
      tags:
      - Users
      summary: Returns the users' liked comments
      description: Returns an Array of comments liked by the user
      operationId: likedComments
      parameters:
      - name: userId
        in: path
        description: id of the user to retrieve its liked comments
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items: 
                  $ref: '#/components/schemas/Post'
        401:
          description: 'Error: no API key'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error401'
        403:
          description: 'Error: API key not valid'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error403'
        404:
          description: 'Error: userId not valid'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error404'
components:
  schemas:
    Post:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 2
        type:
          type: string
          minLength: 4
          example: 'Post'
        author:
          type: string
          minLength: 4
          example: 'my username'
        content:
          type: string
          minLength: 4
          maxLength: 280
          example: 'My content'
        upvotes:
          type: integer
          format: int32
          example: 3
        created_at:
          type: string
          format: date-time
          example: "02/01/2022"
        _links:
          type: object
          properties:
            self:
              type: string
              format: url
              example: 'https://asw.raulplesa.online/item/2'
    AddPostResult:
      type: object
      properties:
        new_Post:
          $ref: '#/components/schemas/Post'
        api_key:
          type: string
          example: "MjAyMC0wNC0xOCAxMjoyODo0MSBVVEM=\n"
    ErrorResult:
      type: object
      properties:
        status:
          type: integer
          enum: [400, 401, 403, 404, 409]
        error: 
          type: string
          enum: ["Bad Request", "Unauthorized", "Forbidden", "Not Found", "Conflict"]
        message: 
          type: string
    Comment:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 4
        type:
          type: string
          minLength: 4
          example: 'Comment'
        author:
          type: string
          minLength: 4
          example: 'my username'
        content:
          type: string
          minLength: 4
          maxLength: 280
          example: 'My Comment text'
        upvotes:
          type: integer
          format: int32
          example: 3
        created_at:
          type: string
          format: date-time
          example: "02/01/2022"
        _links:
          type: object
          properties:
            self:
              type: string
              format: url
              example: 'https://asw.raulplesa.online/item/4'
    AddCommentResult:
      type: object
      properties:
        new_Comment:
          $ref: '#/components/schemas/Comment'
        api_key:
          type: string
          example: "MjAyMC0wNC0xOCAxMjoyODo0MSBVVEM=\n"
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 2
        username:
          type: string
          minLength: 4
          example: 'RaulPlesa'
        about:
          type: string
          minLength: 4
          example: 'description about me'
        karma:
          type: integer
          format: int64
          example: 250
        _links:
          type: object
          properties:
            self:
              type: string
              format: url
              example: 'https://asw.raulplesa.online/user/2'
    ModifiedUserResult:
      type: object
      properties:
        ModifiedUser:
          $ref: '#/components/schemas/User'
        api_key:
          type: string
          example: "MjAyMC0wNC0xOCAxMjoyODo0MSBVVEM=\n"
  examples:
    error400:
      value:
        status: 400
        error: "Bad Request"
        message: "Content is too long (maximum is 280 characters)"
    error400_vote:
      value:
        status: 400
        error: "Bad Request"
        message: "Invalid vote: item was already upvoted or you can't unvote a post you didn't upvote before"
    error401:
      value:
        status: 401
        error: "Unauthorized"
        message: "You provided no api key (X-API-KEY Header)"
    error403:
      value:
        status: 403
        error: "Forbidden"
        message: "Your api key (X-API-KEY Header) is not valid"
    error404:
      value:
        status: 404
        error: "Not Found"
        message: "No Object with that ID"
  securitySchemes:
    ApiKeyAuth:        # arbitrary name for the security scheme
      type: apiKey
      in: header       # can be "header", "query" or "cookie"
      name: X-API-KEY  # name of the header, query parameter or cookie
 